<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ServerConsoleAutostart" xml:space="preserve">
    <value>Automatic start initiated</value>
  </data>
  <data name="ServerConsoleAvailableCommands" xml:space="preserve">
    <value>Available Commands</value>
  </data>
  <data name="ServerConsoleCommand" xml:space="preserve">
    <value>Server Command</value>
  </data>
  <data name="ServerConsoleCommandHelpZone_start" xml:space="preserve">
    <value>Just type 'start' to start the zone engine. To start with scripts compiled into multiple dlls, use 'startm'.</value>
  </data>
  <data name="ServerConsoleCommandHelp_ping" xml:space="preserve">
    <value>Not working yet, but will ping the chatserver in the future.</value>
  </data>
  <data name="ServerConsoleCommandHelp_start" xml:space="preserve">
    <value>Just type 'start' to start the engine.</value>
  </data>
  <data name="ServerConsoleCommandHelp_stop" xml:space="preserve">
    <value>Disconnects all clients and stops the server.</value>
  </data>
  <data name="ErrorIPAddressParseFailed" xml:space="preserve">
    <value>Error parsing my ip address. Check config file!</value>
  </data>
  <data name="ServerConsoleMainText" xml:space="preserve">
    <value>========================================================
CellAO copyright {0} by the CellAO Dev team
We are using BSD Licensing for our Core files
Cell Framework is copyright under GPL
Anarchy Online is copyright by Funcom
Thank you for choosing CellAO
========================================================</value>
  </data>
  <data name="ServerConsoleCommandHelp_exit" xml:space="preserve">
    <value>Shuts down the engine.</value>
  </data>
  <data name="ServerConsoleCommandHelpZone_exit" xml:space="preserve">
    <value>Shuts down ZoneEngine.</value>
  </data>
  <data name="ErrorCreatingScriptCompilerInstance" xml:space="preserve">
    <value>Error while creating ScriptCompiler instance</value>
  </data>
  <data name="ErrorCreatingZoneServerInstance" xml:space="preserve">
    <value>Error while creating ZoneServer instance</value>
  </data>
  <data name="ErrorInitializingDatabase" xml:space="preserve">
    <value>Error while initializing database</value>
  </data>
  <data name="ErrorInitializingEngine" xml:space="preserve">
    <value>Error occurred while initializing. Please check the log file.</value>
  </data>
  <data name="ErrorInitializingGamefunctions" xml:space="preserve">
    <value>Error in Gamefunction initialization</value>
  </data>
  <data name="ErrorInitializingISCom" xml:space="preserve">
    <value>Error initializing ISCom instance</value>
  </data>
  <data name="ErrorInitializingNLogNBug" xml:space="preserve">
    <value>Error occured while initalizing NLog/NBug</value>
  </data>
  <data name="ErrorLoadingItemsNanos" xml:space="preserve">
    <value>Error while loading Items/Nanos</value>
  </data>
  <data name="ErrorReadingItemsFile" xml:space="preserve">
    <value>An error occured while loading the items.dat.</value>
  </data>
  <data name="ErrorReadingNanosFile" xml:space="preserve">
    <value>An error occured while loading the nanos.dat.</value>
  </data>
  <data name="ErrorTCPIPSetup" xml:space="preserve">
    <value>Error initializing TCP/IP setup</value>
  </data>
  <data name="ServerConsoleAvailableScripts" xml:space="preserve">
    <value>Available Scripts</value>
  </data>
  <data name="ServerConsoleCommandHelp_check" xml:space="preserve">
    <value>Checks for missing tables and creates them</value>
  </data>
  <data name="ServerConsoleCommandHelp_ls" xml:space="preserve">
    <value>Lists all available scripts</value>
  </data>
  <data name="ServerConsoleCommandHelp_online" xml:space="preserve">
    <value>Lists all online players</value>
  </data>
  <data name="ServerConsoleCommandHelp_quit" xml:space="preserve">
    <value>Shuts down the engine</value>
  </data>
  <data name="ServerConsoleCommandHelp_startm" xml:space="preserve">
    <value>Starts the server with scripts compiled into separated dlls</value>
  </data>
  <data name="ServerConsoleCommandHelp_updatedb" xml:space="preserve">
    <value>Checks for missing tables and creates them</value>
  </data>
  <data name="ServerConsoleNoScriptsFound" xml:space="preserve">
    <value>No scripts were found.</value>
  </data>
  <data name="ServerConsoleServerIsNotRunning" xml:space="preserve">
    <value>Server is not running.</value>
  </data>
  <data name="ServerConsoleServerIsRunning" xml:space="preserve">
    <value>Server is running.</value>
  </data>
  <data name="ZoneEngineConsoleCommands" xml:space="preserve">
    <value>Enter "start" to start server, "stop" to stop it, "ping" to ping the chatengine, and "exit" to exit program</value>
  </data>
  <data name="ItemLoaderLoadedItems" xml:space="preserve">
    <value>Loaded {0} items</value>
  </data>
  <data name="NanoLoaderLoadedNanos" xml:space="preserve">
    <value>Loaded {0} nanos</value>
  </data>
</root>